version: '3.3'

services:
  db-node-1:
    build:
      context: mariadb
      dockerfile: db-node-01/Dockerfile
    container_name: db-node-1
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: archdb
      MYSQL_USER: stud
      MYSQL_PASSWORD: stud
      MYSQL_ROOT_PASSWORD: '1'
    # command: >
    #   --sql-mode='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
    #   --general-log=ON
    #   --log-queries-not-using-indexes=ON
    networks:
      - arch-network
    ports:
      - 3360:3306
    volumes:
      - db-node-1-data:/var/lib/mysql

  db-node-2:
    build:
      context: mariadb
      dockerfile: db-node-02/Dockerfile
    container_name: db-node-2
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: archdb
      MYSQL_USER: stud
      MYSQL_PASSWORD: stud
      MYSQL_ROOT_PASSWORD: '1'
    networks:
      - arch-network
    ports:
      - 3361:3306
    volumes:
      - db-node-2-data:/var/lib/mysql

  proxysql:
    image: proxysql/proxysql:2.0.6
    command: >
      --initial
    volumes:
    - "./proxysql/proxysql.cnf:/etc/proxysql.cnf"
    - proxysql-data:/var/lib/proxysql
#    healthcheck:
#      test: "/usr/bin/mysql --user=stud --password=stud --execute \"SHOW DATABASES;\""
#      timeout: 20s
#      retries: 5
    networks:
      - arch-network
    ports:
    - "6033:6033"
    - "6032:6032"
    depends_on:
      - db-node-1
      - db-node-2


  streamlit_app_frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    container_name: streamlit_app_frontend
    restart: unless-stopped
    environment:
      - MARKET_SERVICE_HOST=fastapi_backend
      - MARKET_SERVICE_PORT=8000
    ports:
      - "8501:8501"
    depends_on:
      - fastapi_backend
    networks:
      - arch-network

  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning
    networks:
      - arch-network
    volumes:
      - cache:/data

  kafka1:
      image: 'bitnami/kafka:latest'
      container_name: kafka1
      ports:
      #   - "2181:2181"
         - "9092:9092"
      #   - "9093:9093"
      environment:
        KAFKA_ENABLE_KRAFT: "yes"
        KAFKA_CFG_PROCESS_ROLES: "broker,controller"
        KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
        KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
        KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092"
        KAFKA_BROKER_ID: 1
        KAFKA_CFG_NODE_ID: 1
        KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093"
        ALLOW_PLAINTEXT_LISTENER: "yes"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_KRAFT_CLUSTER_ID: "dh6khitPSDGZSBOjNeTC_g"
      volumes:
        - kafka_volume1:/bitnami/kafka
      networks:
        - arch-network

  kafka2:
      image: 'bitnami/kafka:latest'
      container_name: kafka2
      # ports:
      #   - "2181:2181"
      #   - "9092:9092"
      #   - "9093:9093"
      environment:
        KAFKA_ENABLE_KRAFT: "yes"
        KAFKA_CFG_PROCESS_ROLES: "broker,controller"
        KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
        KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
        KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka2:9092"
        KAFKA_BROKER_ID: 2
        KAFKA_CFG_NODE_ID: 2
        KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093"
        ALLOW_PLAINTEXT_LISTENER: "yes"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_KRAFT_CLUSTER_ID: "dh6khitPSDGZSBOjNeTC_g"
      volumes:
        - kafka_volume2:/bitnami/kafka
      networks:
        - arch-network

  kafka-ui:
      image: provectuslabs/kafka-ui:v0.4.0
      ports:
        - "8888:8080"
      environment:
        KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092"
        KAFKA_CLUSTERS_0_NAME: "kraft"
      networks:
        - arch-network

  writer:
    build:
      context: writer
      dockerfile: Dockerfile
    container_name: writer
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - KAFKA_HOST=kafka1
      - KAFKA_PORT=9092
      - KAFKA_TOPIC=event_server
      - KAFKA_GROUP_ID=0
    networks:
      - arch-network
    depends_on:
      - proxysql
      - cache
      - kafka1
      - db-node-1
      - db-node-2

  fastapi_backend:
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: fastapi_backend
    restart: unless-stopped
    environment:
      - DB_HOST=proxysql
      - DB_PORT=6033
      - DB_USER=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - CACHE_HOST=cache
      - CACHE_POST=6379
      - CACHE_EXPIRATION=3600
      - KAFKA_HOST=kafka1
      - KAFKA_PORT=9092
      - KAFKA_TOPIC=event_server
      - KAFKA_GROUP_ID=0
    ports:
      - "8000:8000"
    networks:
      - arch-network
    depends_on:
      - proxysql
      - cache
      - kafka1
      - db-node-1
      - db-node-2
#        condition: service_healthy

volumes:
  db-node-1-data:
  db-node-2-data:
  proxysql-data:
  cache:
  kafka_volume1:
  kafka_volume2:

networks:
  arch-network:
    driver: "bridge"
    external: false